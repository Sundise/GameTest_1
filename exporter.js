// exporter.js
import { IV } from './iv.js';

// 支持的导出格式
export enum ExportFormat {
    OBJ = 'obj',
    STL = 'stl',
    GLTF = 'gltf',
}

// 模型导出器
export class ModelExporter {
    constructor(private ivs: IV[]) {}

    // 导出为OBJ格式
    exportToOBJ(): string {
        let objContent = "# Dark Souls Collision Data Export\n";
        objContent += "# Generated by ModelExporter\n\n";
        
        // 顶点计数器
        let vertexOffset = 0;
        
        // 处理每个IV文件（场景）
        for (const iv of this.ivs) {
            objContent += `o ${iv.name}\n`;
            
            // 添加材质信息
            const color = iv.color;
            objContent += `usemtl ${iv.name}\n`;
            
            // 处理每个Chunk
            for (const chunk of iv.chunks) {
                const positions = chunk.positionData;
                const indices = chunk.indexData;
                
                // 添加顶点
                for (let i = 0; i < positions.length; i += 3) {
                    objContent += `v ${positions[i]} ${positions[i+1]} ${positions[i+2]}\n`;
                }
                
                // 添加面
                for (let i = 0; i < indices.length; i += 3) {
                    // OBJ索引从1开始
                    const v1 = indices[i] + 1 + vertexOffset;
                    const v2 = indices[i+1] + 1 + vertexOffset;
                    const v3 = indices[i+2] + 1 + vertexOffset;
                    objContent += `f ${v1} ${v2} ${v3}\n`;
                }
                
                // 更新顶点偏移量
                vertexOffset += positions.length / 3;
            }
        }
        
        return objContent;
    }

    // 导出为STL格式
    exportToSTL(): string {
        // 实现STL导出逻辑
        // ...
    }

    // 导出为GLTF格式
    exportToGLTF(): ArrayBuffer {
        // 实现GLTF导出逻辑
        // ...
    }

    // 触发文件下载
    downloadFile(content: string | ArrayBuffer, format: ExportFormat) {
        const fileName = `dark_souls_collision.${format}`;
        let blob: Blob;
        
        if (typeof content === 'string') {
            blob = new Blob([content], { type: 'text/plain' });
        } else {
            blob = new Blob([content], { type: 'application/octet-stream' });
        }
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
}
